/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var u=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var F=Object.prototype.hasOwnProperty;var T=(d,o)=>{for(var e in o)u(d,e,{get:o[e],enumerable:!0})},I=(d,o,e,t)=>{if(o&&typeof o=="object"||typeof o=="function")for(let s of k(o))!F.call(d,s)&&s!==e&&u(d,s,{get:()=>o[s],enumerable:!(t=b(o,s))||t.enumerable});return d};var C=d=>I(u({},"__esModule",{value:!0}),d);var v={};T(v,{default:()=>c});module.exports=C(v);var n=require("obsidian"),E={imageExtensions:"png, jpg, jpeg, gif, svg, bmp",maxDeleteCount:-1,moveToTrash:!1},c=class extends n.Plugin{constructor(){super(...arguments);this.ribbonIconEl=null}async onload(){console.log("Loading Find Orphaned Images Plugin"),await this.loadSettings(),this.addSettingTab(new w(this.app,this)),this.addCommand({id:"find-orphaned-images",name:"Find or delete orphaned images",callback:()=>this.showOptionsModal()}),this.ribbonIconEl=this.addRibbonIcon("find-orphaned-images-icon","Find orphaned images",()=>{this.showOptionsModal()})}showOptionsModal(){new f(this.app,this).open()}async findUnlinkedImages(e){let{vault:t,metadataCache:s}=this.app,g=this.settings.imageExtensions.split(",").map(i=>i.trim()),r=t.getFiles().filter(i=>g.includes(i.extension)),a=[];r.forEach(i=>{let l=i.path,m=!1;for(let[x,p]of Object.entries(s.resolvedLinks))if(p[l]){m=!0;break}m||a.push(l)}),a.length>0?(await this.createOrUpdateUnlinkedImagesNote(a,e),new n.Notice(`Found ${a.length} orphaned images. Note created or updated with details.`)):new n.Notice("All images are linked!")}async deleteFirstUnlinkedImage(){let{vault:e,metadataCache:t}=this.app,s=this.settings.imageExtensions.split(",").map(i=>i.trim()),h=e.getFiles().filter(i=>s.includes(i.extension)),r=[];h.forEach(i=>{let l=i.path,m=!1;for(let[x,p]of Object.entries(t.resolvedLinks))if(p[l]){m=!0;break}m||r.push(l)});let a=0;for(let i of r){if(this.settings.maxDeleteCount!==-1&&a>=this.settings.maxDeleteCount)break;try{let l=e.getAbstractFileByPath(i);l instanceof n.TFile&&(this.settings.moveToTrash?(await e.trash(l,!0),new n.Notice(`Moved orphaned image to trash: ${i}`)):(await e.delete(l),new n.Notice(`Deleted orphaned image: ${i}`)),a++)}catch(l){console.error("Failed to delete the image:",l),new n.Notice("Failed to delete the orphaned image.")}}a===0&&new n.Notice("No orphaned images found to delete.")}async createOrUpdateUnlinkedImagesNote(e,t){let{vault:s}=this.app,g=`# Orphaned Images

These images are not linked in any note:

`+e.map(a=>{let i=this.encodeImagePath(a);return t?`- ![](${i})`:`- [${a}](${i})`}).join(`
`),h="Orphaned Images Report.md",r=`${h}`;try{let a=s.getAbstractFileByPath(r);a instanceof n.TFile?await s.modify(a,g):await s.create(r,g),new n.Notice(`Note "${h}" created or updated with orphaned images.`),this.app.workspace.openLinkText(r,"",!0)}catch(a){console.error("Failed to create or update note:",a),new n.Notice("Failed to create or update note with orphaned images.")}}encodeImagePath(e){return e.replace(/ /g,"%20")}async loadSettings(){this.settings=Object.assign({},E,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}onunload(){console.log("Unloading Find Orphaned Images Plugin"),this.ribbonIconEl&&this.ribbonIconEl.remove()}},f=class extends n.Modal{constructor(e,t){super(e);this.plugin=t}onOpen(){let{contentEl:e}=this;e.createEl("h2",{text:"Create a report or delete the images?"}),new n.Setting(e).setName("Embed images").setDesc("Create a report with embedded images. This will display the images in the note.").addButton(t=>t.setButtonText("Create").setCta().onClick(()=>{this.plugin.findUnlinkedImages(!0),this.close()})),new n.Setting(e).setName("Text links").setDesc("Create a report with text links to the images. This will not display the images in the note.").addButton(t=>t.setButtonText("Create").setCta().onClick(()=>{this.plugin.findUnlinkedImages(!1),this.close()})),new n.Setting(e).setName("Delete orphaned images").setDesc("Delete the X images found in the vault. X is the max delete count, defined in the settings.").addButton(t=>t.setButtonText("Delete").setCta().onClick(()=>{this.plugin.deleteFirstUnlinkedImage(),this.close()}))}onClose(){let{contentEl:e}=this;e.empty()}},w=class extends n.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),new n.Setting(e).setName("Image extensions").setDesc("Comma-separated list of image extensions to look for.").addText(t=>t.setPlaceholder("Enter image extensions").setValue(this.plugin.settings.imageExtensions).onChange(async s=>{this.plugin.settings.imageExtensions=s,await this.plugin.saveSettings()})),new n.Setting(e).setName("Max delete count").setDesc("Maximum number of orphaned images to delete (-1 for no limit).").addText(t=>t.setPlaceholder("-1").setValue(this.plugin.settings.maxDeleteCount.toString()).onChange(async s=>{this.plugin.settings.maxDeleteCount=parseInt(s,10)||-1,await this.plugin.saveSettings()})),new n.Setting(e).setName("Move to Trash").setDesc("If enabled, orphaned images will be moved to the system trash instead of deleted.").addToggle(t=>t.setValue(this.plugin.settings.moveToTrash).onChange(async s=>{this.plugin.settings.moveToTrash=s,await this.plugin.saveSettings()}))}};

/* nosourcemap */