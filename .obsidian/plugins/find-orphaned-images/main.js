/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var b=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var y=Object.prototype.hasOwnProperty;var C=(h,c)=>{for(var e in c)b(h,e,{get:c[e],enumerable:!0})},k=(h,c,e,t)=>{if(c&&typeof c=="object"||typeof c=="function")for(let a of x(c))!y.call(h,a)&&a!==e&&b(h,a,{get:()=>c[a],enumerable:!(t=v(c,a))||t.enumerable});return h};var T=h=>k(b({},"__esModule",{value:!0}),h);var O={};C(O,{default:()=>f});module.exports=T(O);var s=require("obsidian"),E={imageExtensions:"png, jpg, jpeg, gif, svg, bmp",maxDeleteCount:-1,moveToTrash:!1,showRibbonIcon:!1},f=class extends s.Plugin{constructor(){super(...arguments);this.ribbonIconEl=null}async onload(){console.log("Loading Find Orphaned Images Plugin"),await this.loadSettings(),this.addSettingTab(new I(this.app,this)),this.addCommand({id:"find-orphaned-images",name:"Find or delete orphaned images",callback:()=>this.showOptionsModal()}),this.settings.showRibbonIcon&&this.addIconToRibbon()}addIconToRibbon(){this.ribbonIconEl=this.addRibbonIcon("image","Find orphaned images",()=>{this.showOptionsModal()})}showOptionsModal(){new w(this.app,this).open()}async isImageInCanvasFiles(e){let{vault:t}=this.app,p=t.getFiles().filter(n=>n.extension==="canvas"),g=e,r=[g,g.replace(/^\//,""),g.replace(/ /g,"%20"),this.encodeImagePath(g)],o=g.split("/").pop()||"";r.push(o),console.log(`Checking if image is in canvas files: ${e}`),console.log("Path variations:",r);for(let n of p)try{let l=await t.read(n);console.log(`Checking canvas file: ${n.path}`);for(let i of r)if(l.includes(i))return console.log(`Found match for ${i} in ${n.path}`),!0;try{let i=JSON.parse(l);if(console.log(`Canvas structure for ${n.path}:`,Object.keys(i)),i.nodes&&Array.isArray(i.nodes)){console.log(`Canvas has ${i.nodes.length} nodes`),i.nodes.length>0&&console.log("Sample node structure:",Object.keys(i.nodes[0]));for(let d of i.nodes){for(let[m,u]of Object.entries(d))if(typeof u=="string"){for(let F of r)if(u.includes(F))return console.log(`Found match in node.${m} for ${F}`),!0}if((d.type==="file"||d.type==="image"||d.type==="media")&&d.file){for(let m of r)if(d.file.includes(m))return console.log(`Found match in node.file: ${d.file}`),!0}}}if(i.edges&&Array.isArray(i.edges))for(let d of i.edges){let m=JSON.stringify(d);for(let u of r)if(m.includes(u))return console.log(`Found match in edge: ${u}`),!0}}catch(i){console.error(`Error parsing canvas file JSON for ${n.path}:`,i)}}catch(l){console.error(`Failed to read canvas file ${n.path}:`,l);continue}return console.log(`No canvas references found for ${e}`),!1}async findUnlinkedImages(e){let{vault:t,metadataCache:a}=this.app,p=this.settings.imageExtensions.split(",").map(n=>n.trim()),r=t.getFiles().filter(n=>p.includes(n.extension)),o=[];for(let n of r){let l=n.path,i=!1;for(let[,d]of Object.entries(a.resolvedLinks))if(d[l]){i=!0;break}i||(i=await this.isImageInCanvasFiles(l)),i||o.push(l)}o.length>0?(await this.createOrUpdateUnlinkedImagesNote(o,e),new s.Notice(`Found ${o.length} orphaned images. Note created or updated with details.`)):new s.Notice("All images are linked!")}async deleteFirstUnlinkedImage(){let{vault:e,metadataCache:t}=this.app,a=this.settings.imageExtensions.split(",").map(n=>n.trim()),g=e.getFiles().filter(n=>a.includes(n.extension)),r=[];for(let n of g){let l=n.path,i=!1;for(let[,d]of Object.entries(t.resolvedLinks))if(d[l]){i=!0;break}i||(i=await this.isImageInCanvasFiles(l)),i||r.push(l)}let o=0;for(let n of r){if(this.settings.maxDeleteCount!==-1&&o>=this.settings.maxDeleteCount)break;try{let l=e.getAbstractFileByPath(n);l instanceof s.TFile&&(this.settings.moveToTrash?(await e.trash(l,!0),new s.Notice(`Moved orphaned image to trash: ${n}`)):(await e.delete(l),new s.Notice(`Deleted orphaned image: ${n}`)),o++)}catch(l){console.error("Failed to delete the image:",l),new s.Notice("Failed to delete the orphaned image.")}}o===0&&new s.Notice("No orphaned images found to delete.")}async createOrUpdateUnlinkedImagesNote(e,t){let{vault:a}=this.app,p=`# Orphaned Images

These images are not linked in any note:

`+e.map(o=>{let n=this.encodeImagePath(o);return t?`- ![](${n})`:`- [${o}](${n})`}).join(`
`),g="Orphaned Images Report.md",r=`${g}`;try{let o=a.getAbstractFileByPath(r);o instanceof s.TFile?await a.modify(o,p):await a.create(r,p),new s.Notice(`Note "${g}" created or updated with orphaned images.`),this.app.workspace.openLinkText(r,"",!0)}catch(o){console.error("Failed to create or update note:",o),new s.Notice("Failed to create or update note with orphaned images.")}}encodeImagePath(e){return e.replace(/ /g,"%20")}async loadSettings(){this.settings=Object.assign({},E,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}onunload(){console.log("Unloading Find Orphaned Images Plugin"),this.ribbonIconEl&&this.ribbonIconEl.remove()}},w=class extends s.Modal{constructor(e,t){super(e);this.plugin=t}onOpen(){let{contentEl:e}=this;e.createEl("h2",{text:"Create a report or delete the images?"}),new s.Setting(e).setName("Embed images").setDesc("Create a report with embedded images. This will display the images in the note.").addButton(t=>t.setButtonText("Create").setCta().onClick(()=>{this.plugin.findUnlinkedImages(!0),this.close()})),new s.Setting(e).setName("Text links").setDesc("Create a report with text links to the images. This will not display the images in the note.").addButton(t=>t.setButtonText("Create").setCta().onClick(()=>{this.plugin.findUnlinkedImages(!1),this.close()})),new s.Setting(e).setName("Delete orphaned images").setDesc("Delete the X images found in the vault. X is the max delete count, defined in the settings.").addButton(t=>t.setButtonText("Delete").setCta().onClick(()=>{this.plugin.deleteFirstUnlinkedImage(),this.close()}))}onClose(){let{contentEl:e}=this;e.empty()}},I=class extends s.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),new s.Setting(e).setName("Image extensions").setDesc("Comma-separated list of image extensions to look for.").addText(t=>t.setPlaceholder("Enter image extensions").setValue(this.plugin.settings.imageExtensions).onChange(async a=>{this.plugin.settings.imageExtensions=a,await this.plugin.saveSettings()})),new s.Setting(e).setName("Max delete count").setDesc("Maximum number of orphaned images to delete (-1 for no limit).").addText(t=>t.setPlaceholder("-1").setValue(this.plugin.settings.maxDeleteCount.toString()).onChange(async a=>{this.plugin.settings.maxDeleteCount=parseInt(a,10)||-1,await this.plugin.saveSettings()})),new s.Setting(e).setName("Move to Trash").setDesc("If enabled, orphaned images will be moved to the system trash instead of deleted.").addToggle(t=>t.setValue(this.plugin.settings.moveToTrash).onChange(async a=>{this.plugin.settings.moveToTrash=a,await this.plugin.saveSettings()})),new s.Setting(e).setName("Show Ribbon Icon").setDesc("If enabled, a ribbon icon will be added to the left sidebar.").addToggle(t=>t.setValue(this.plugin.settings.showRibbonIcon).onChange(async a=>{this.plugin.settings.showRibbonIcon=a,this.plugin.ribbonIconEl&&(this.plugin.ribbonIconEl.remove(),this.plugin.ribbonIconEl=null),a&&this.plugin.addIconToRibbon(),await this.plugin.saveSettings()}))}};

/* nosourcemap */