/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => BetterLinkInserterPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var BetterLinkInserterPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.addCommand({
        id: "use-selected-word-as-alias",
        name: "Insert an internal link",
        editorCallback: (editor, view) => {
          const selected_word = editor.getSelection();
          if (selected_word == "") {
            editor.replaceSelection(`[[]]`);
            const current_line = editor.getCursor();
            const wanted_position = current_line;
            wanted_position.ch = wanted_position.ch - 2;
            editor.setCursor(wanted_position);
          } else {
            editor.replaceSelection(`[[|${selected_word}]]`);
            const current_line = editor.getCursor();
            const wanted_position = current_line;
            wanted_position.ch = wanted_position.ch - (selected_word.length + 3);
            editor.setCursor(wanted_position);
          }
        }
      });
      this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHtcblx0RWRpdG9yLFxuXHRNYXJrZG93blZpZXcsXG5cdFBsdWdpbixcbn0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCZXR0ZXJMaW5rSW5zZXJ0ZXJQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0Ly8gVGhpcyBhZGRzIGFuIGVkaXRvciBjb21tYW5kIHRoYXQgY2FuIHBlcmZvcm0gc29tZSBvcGVyYXRpb24gb24gdGhlIGN1cnJlbnQgZWRpdG9yIGluc3RhbmNlXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiBcInVzZS1zZWxlY3RlZC13b3JkLWFzLWFsaWFzXCIsXG5cdFx0XHRuYW1lOiBcIkluc2VydCBhbiBpbnRlcm5hbCBsaW5rXCIsXG5cdFx0XHRlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcblx0XHRcdFx0Y29uc3Qgc2VsZWN0ZWRfd29yZCA9IGVkaXRvci5nZXRTZWxlY3Rpb24oKTtcblx0XHRcdFx0aWYgKHNlbGVjdGVkX3dvcmQgPT0gXCJcIikge1xuXHRcdFx0XHRcdGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKGBbW11dYCk7XG5cdFx0XHRcdFx0Y29uc3QgY3VycmVudF9saW5lID0gZWRpdG9yLmdldEN1cnNvcigpO1xuXHRcdFx0XHRcdGNvbnN0IHdhbnRlZF9wb3NpdGlvbiA9IGN1cnJlbnRfbGluZTtcblx0XHRcdFx0XHR3YW50ZWRfcG9zaXRpb24uY2ggPVxuXHRcdFx0XHRcdFx0d2FudGVkX3Bvc2l0aW9uLmNoIC0gMjtcblx0XHRcdFx0XHRlZGl0b3Iuc2V0Q3Vyc29yKHdhbnRlZF9wb3NpdGlvbik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24oYFtbfCR7c2VsZWN0ZWRfd29yZH1dXWApO1xuXHRcdFx0XHRcdGNvbnN0IGN1cnJlbnRfbGluZSA9IGVkaXRvci5nZXRDdXJzb3IoKTtcblx0XHRcdFx0XHRjb25zdCB3YW50ZWRfcG9zaXRpb24gPSBjdXJyZW50X2xpbmU7XG5cdFx0XHRcdFx0d2FudGVkX3Bvc2l0aW9uLmNoID1cblx0XHRcdFx0XHRcdHdhbnRlZF9wb3NpdGlvbi5jaCAtIChzZWxlY3RlZF93b3JkLmxlbmd0aCArIDMpO1xuXHRcdFx0XHRcdGVkaXRvci5zZXRDdXJzb3Iod2FudGVkX3Bvc2l0aW9uKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHR9KTtcblxuXHRcdC8vIElmIHRoZSBwbHVnaW4gaG9va3MgdXAgYW55IGdsb2JhbCBET00gZXZlbnRzIChvbiBwYXJ0cyBvZiB0aGUgYXBwIHRoYXQgZG9lc24ndCBiZWxvbmcgdG8gdGhpcyBwbHVnaW4pXG5cdFx0Ly8gVXNpbmcgdGhpcyBmdW5jdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lciB3aGVuIHRoaXMgcGx1Z2luIGlzIGRpc2FibGVkLlxuXG5cdFx0Ly8gV2hlbiByZWdpc3RlcmluZyBpbnRlcnZhbHMsIHRoaXMgZnVuY3Rpb24gd2lsbCBhdXRvbWF0aWNhbGx5IGNsZWFyIHRoZSBpbnRlcnZhbCB3aGVuIHRoZSBwbHVnaW4gaXMgZGlzYWJsZWQuXG5cdFx0dGhpcy5yZWdpc3RlckludGVydmFsKFxuXHRcdFx0d2luZG93LnNldEludGVydmFsKCgpID0+IGNvbnNvbGUubG9nKFwic2V0SW50ZXJ2YWxcIiksIDUgKiA2MCAqIDEwMDApXG5cdFx0KTtcblx0fVxuXG5cdG9udW5sb2FkKCkge31cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBSU87QUFJUCw2Q0FBc0QsdUJBQU87QUFBQSxFQUN0RCxTQUFTO0FBQUE7QUFFZCxXQUFLLFdBQVc7QUFBQSxRQUNmLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLGdCQUFnQixDQUFDLFFBQWdCLFNBQXVCO0FBQ3ZELGdCQUFNLGdCQUFnQixPQUFPO0FBQzdCLGNBQUksaUJBQWlCLElBQUk7QUFDeEIsbUJBQU8saUJBQWlCO0FBQ3hCLGtCQUFNLGVBQWUsT0FBTztBQUM1QixrQkFBTSxrQkFBa0I7QUFDeEIsNEJBQWdCLEtBQ2YsZ0JBQWdCLEtBQUs7QUFDdEIsbUJBQU8sVUFBVTtBQUFBLGlCQUNYO0FBQ04sbUJBQU8saUJBQWlCLE1BQU07QUFDOUIsa0JBQU0sZUFBZSxPQUFPO0FBQzVCLGtCQUFNLGtCQUFrQjtBQUN4Qiw0QkFBZ0IsS0FDZixnQkFBZ0IsS0FBTSxlQUFjLFNBQVM7QUFDOUMsbUJBQU8sVUFBVTtBQUFBO0FBQUE7QUFBQTtBQVNwQixXQUFLLGlCQUNKLE9BQU8sWUFBWSxNQUFNLFFBQVEsSUFBSSxnQkFBZ0IsSUFBSSxLQUFLO0FBQUE7QUFBQTtBQUFBLEVBSWhFLFdBQVc7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
